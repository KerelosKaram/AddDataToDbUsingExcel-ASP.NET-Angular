using API.Data.Models.Entities.Sql2017;
using Microsoft.EntityFrameworkCore;

namespace API.Data.AppDbContext.Sql2017DbContext

{
    public class Sql2017DbContext : DbContext
    {

        public DbSet<QSCustomerBrandTarget>? QSCustomerBrandTarget { get; set; }
        public DbSet<QSCustomerTarget>? QSCustomerTarget { get; set; }
        public DbSet<IGPSalesmanTarget>? IGPSalesmanTarget { get; set; }
        public DbSet<IGPItemElamir>? IGPItemElamir { get; set; }
        public DbSet<ItemActiveDistElamir>? ItemActiveDistElamir { get; set; }
        public DbSet<PSKUItemElamir>? PSKUItemElamir { get; set; }
        
        public Sql2017DbContext(DbContextOptions<Sql2017DbContext> options) : base(options) 
        { 

        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IGPSalesmanTarget>(entity => 
            {
                entity.ToTable("IGPSalesmanTarget").HasKey(x => x.SalesmanCode); // Specify table name if different

                entity.Property(e => e.SalesmanCode)
                    .HasColumnType("nvarchar(20)");
                    // .IsRequired(false);

                entity.Property(e => e.TradeChannel)
                    .HasColumnType("nvarchar(50)")
                    .IsRequired(false);
                    
                entity.Property(e => e.PSKUName)
                    .HasColumnType("nvarchar(200)")
                    .IsRequired(false);
            });

            modelBuilder.Entity<IGPItemElamir>(entity =>
            {
                // Define PSKUItemID as the primary key and enable auto-incrementing (EF Core-generated)
                entity.HasKey(e => e.PSKUItemID);
                
                // Configure PSKUItemID to be auto-generated by EF Core on insert
                entity.Property(e => e.PSKUItemID)
                    .HasColumnType("bigint")
                    .ValueGeneratedOnAdd();  // EF Core will auto-increment this field when adding a new record

                // Other property configurations
                entity.Property(e => e.ItemCode)
                    .HasColumnType("nvarchar(20)")
                    .IsRequired(true);

                entity.Property(e => e.PSKUName)
                    .HasColumnType("nvarchar(200)")
                    .IsRequired(false);

                entity.Property(e => e.ElamirTradeChannelID)
                    .HasColumnType("nvarchar(50)")
                    .IsRequired(false);

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .IsRequired(true);

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .IsRequired(true);

                entity.Property(e => e.InsertUser)
                    .HasColumnType("nvarchar(20)")
                    .IsRequired(false);

                entity.Property(e => e.InsertDate)
                    .HasColumnType("datetime")
                    .IsRequired(false);

                entity.Property(e => e.DeleteFlag)
                    .HasColumnType("bit")
                    .IsRequired(false);

                entity.Property(e => e.DeleteUser)
                    .HasColumnType("nvarchar(20)")
                    .IsRequired(false);

                entity.Property(e => e.DeleteDate)
                    .HasColumnType("datetime")
                    .IsRequired(false);

                entity.Property(e => e.tempID)
                    .HasColumnType("bigint")
                    .IsRequired(false);
            });

            modelBuilder.Entity<PSKUItemElamir>(entity => 
            {
                entity.ToTable("PSKUItemElamir").HasKey(e => e.PSKUItemID);

                entity.Property(e => e.ItemCode)
                    .HasColumnType("nvarchar(20)")
                    .IsRequired(true);

                entity.Property(e => e.CSKUID)
                    .HasColumnType("bigint")
                    .IsRequired(false);

                entity.Property(e => e.CSKUName)
                    .HasColumnType("nvarchar(200)")
                    .IsRequired(false);

                entity.Property(e => e.PSKUID)
                    .HasColumnType("bigint")
                    .IsRequired(false);

                entity.Property(e => e.PSKUName)
                    .HasColumnType("nvarchar(200)")
                    .IsRequired(false);

                entity.Property(e => e.ElamirTradeChannelID)
                    .HasColumnType("nvarchar(50)")
                    .IsRequired(true);

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .IsRequired(true)
                    .HasDefaultValue(DateTime.Now);

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .IsRequired(true)
                    .HasDefaultValue(DateTime.Now);

                entity.Property(e => e.InsertUser)
                    .HasColumnType("nvarchar(20)")
                    .IsRequired(true);

                entity.Property(e => e.InsertDate)
                    .HasColumnType("datetime")
                    .IsRequired(false);
                
                entity.Property(e => e.DeleteFlag)
                    .HasColumnType("bit")
                    .IsRequired(true);

                entity.Property(e => e.DeleteUser)
                    .HasColumnType("nvarchar(20)")
                    .IsRequired(false);

                entity.Property(e => e.DeleteDate)
                    .HasColumnType("datetime")
                    .IsRequired(false);

                entity.Property(e => e.tempID)
                    .HasColumnType("bigint")
                    .IsRequired(false);

                entity.Property(e => e.PSKUItemID)
                    .HasColumnType("bigint")
                    .IsRequired(true);
                
                entity.Property(e => e.MOQ)
                    .IsRequired(false);
            });

            modelBuilder.Entity<ItemActiveDistElamir>(entity =>
            {

                entity.ToTable("ItemActiveDistElamir").HasKey(e => e.ItemActiveDistID);

                // Configure properties with constraints based on database schema
                entity.Property(e => e.ItemCode)
                    .HasMaxLength(20)
                    .IsRequired(); // Unchecked (non-nullable)

                entity.Property(e => e.PSKUName)
                    .HasMaxLength(200)
                    .IsRequired(false); // Checked (nullable)

                entity.Property(e => e.ElamirTradeChannelID)
                    .HasMaxLength(50)
                    .IsRequired(); // Unchecked (non-nullable)

                entity.Property(e => e.FromDate)
                    .IsRequired(); // Unchecked (non-nullable)

                entity.Property(e => e.ToDate)
                    .IsRequired(); // Unchecked (non-nullable)

                entity.Property(e => e.InsertUser)
                    .HasMaxLength(20)
                    .IsRequired(); // Unchecked (non-nullable)

                entity.Property(e => e.InsertDate)
                    .IsRequired(); // Unchecked (non-nullable)

                entity.Property(e => e.DeleteFlag)
                    .IsRequired(); // Unchecked (non-nullable)

                entity.Property(e => e.DeleteUser)
                    .HasMaxLength(20)
                    .IsRequired(false); // Checked (nullable)

                entity.Property(e => e.DeleteDate)
                    .IsRequired(false); // Checked (nullable)

                entity.Property(e => e.TempID)
                    .IsRequired(false); // Checked (nullable)

                entity.Property(e => e.ItemActiveDistID)
                    .IsRequired();
                    // .ValueGeneratedOnAddOrUpdate(); // Unchecked (non-nullable)

                entity.Property(e => e.MOQ)
                    .IsRequired(false); // Checked (nullable)
            });

            base.OnModelCreating(modelBuilder);
        }

    }
}